{
  "description": "Retrieve a file from S3.",
  "schemaVersion": "0.3",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "S3Path": {
      "type": "String",
      "description": "(Required) S3 Path of File",
      "default": "s3://binaries"
    },
    "LocalPath": {
      "type": "String",
      "description": "(Required) Local Path",
      "default": "c:\\"
    },
    "InstanceId": {
      "type": "String",
      "description": "(Required) EC2 Instance(s) to download the file to"
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to execute this document.",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "assertInstanceIsWindows",
      "action": "aws:assertAwsResourceProperty",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "PropertySelector": "$.Reservations[0].Instances[0].Platform",
        "DesiredValues": [
          "windows"
        ]
      },
      "isCritical": "true",
      "nextStep": "describeManagedInstance"
    },
    {
      "name": "describeManagedInstance",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ssm",
        "Api": "DescribeInstanceInformation",
        "InstanceInformationFilterList": [
          {
            "key": "InstanceIds",
            "valueSet": [
              "{{ InstanceId }}"
            ]
          }
        ]
      },
      "outputs": [
        {
          "Name": "PingStatus",
          "Selector": "$.InstanceInformationList[0].PingStatus"
        }
      ],
      "isCritical": "true",
      "nextStep": "branchOnManagedInstancePingStatus"
    },
    {
      "name": "branchOnManagedInstancePingStatus",
      "action": "aws:branch",
      "onFailure": "Abort",
      "inputs": {
        "Choices": [
          {
            "NextStep": "getFileFromS3",
            "Variable": "{{ describeManagedInstance.PingStatus }}",
            "StringEquals": "Online"
          }
        ]
      },
      "isCritical": "true",
      "isEnd": "true"
    },
    {
      "name": "getFileFromS3",
      "action": "aws:runCommand",
      "onFailure": "Continue",
      "inputs": {
        "InstanceIds": [
          "{{ InstanceId }}"
        ],
        "DocumentName": "AWS-RunPowerShellScript",
        "Parameters": {
          "commands": [
            "Import-Module AWSPowerShell",
            "",
            "# ---- VARIABLES ----",
            "$S3Path  = '{{ S3Path }}'",
            "$LocalPath = '{{ LocalPath }}'",
            "",
            "# ---- FUNCTIONS -----",
            "function Get-FileFromS3",
            "{",
            "    [CmdletBinding(SupportsShouldProcess = $true)]",
            "    param",
            "    (",
            "        [Parameter(Mandatory = $true)]",
            "        [ValidateNotNullOrEmpty()]",
            "        [String]$Path = 's3://binaries',",
            "",
            "        [Parameter(Mandatory = $false)]",
            "        [ValidateNotNullOrEmpty()]",
            "        [String]$LocalPath = 'C:\\',",
            "",
            "        [Parameter(Mandatory = $false)]",
            "        [ValidateNotNullOrEmpty()]",
            "        [String]$Region = 'us-west-2'",
            "    )",
            "",
            "    if ($PSCmdlet.ShouldProcess('Self', 'Install of Dynatrace'))",
            "    {",
            "        $BucketPattern = \"s3://(.*?)/\"",
            "        $Bucket = [regex]::match($Path, $BucketPattern).Groups[1].Value",
            "",
            "        $KeyPattern = \"s3://$Bucket/(.*)\"",
            "        $Key = [regex]::match($Path, $KeyPattern).Groups[1].value",
            "",
            "        $FileName = [System.IO.Path]::GetFileName($Key)",
            "",
            "        Copy-S3Object -Region $Region -Bucket $Bucket -Key $Key -LocalFile \"$LocalPath\\$FileName\" -Force",
            "    }",
            "}",
            "",
            "# ---- MAIN -----",
            "try",
            "{",
            "    $Region = (Invoke-WebRequest -UseBasicParsing -Uri http://169.254.169.254/latest/dynamic/instance-identity/document | ConvertFrom-Json | Select region).region",
            "    Get-FileFromS3 -Path $S3Path -LocalPath $LocalPath -Region $Region",
            "}",
            "catch",
            "{",
            "    throw $_.Exception.Message",
            "}"
          ]
        }
      },
      "maxAttempts": 1,
      "timeoutSeconds": 240,
      "isCritical": true,
      "isEnd": true
    }
  ],
  "outputs": [
    "getFileFromS3.Output"
  ]
}