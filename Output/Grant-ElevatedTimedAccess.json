{
  "description": "Grants Administrator privileges to an IAM user.",
  "schemaVersion": "0.3",
  "assumeRole": "arn:aws:iam::{{ global:ACCOUNT_ID }}:role/SSMAutomationRole",
  "parameters": {
    "IAMUser": {
      "type": "String",
      "description": "(Required) IAM user to grant Administrator privileges.",
      "default": "8west-",
      "allowedPattern": "^8west-[a-zA-Z0-9]{3,20}$"
    },
    "Reason": {
      "type": "String",
      "description": "(Required) Reason for requesting Administrator privileges.",
      "default": "Administrator privileges required for troubleshooting"
    },
    "Duration": {
      "type": "String",
      "description": "(Required) Duration (in hours) to grant Administrator privileges.",
      "default": "4",
      "allowedValues": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    }
  },
  "mainSteps": [
    {
      "name": "deployElevatedPolicyGeneratorLambda",
      "action": "aws:createStack",
      "inputs": {
        "StackName": "timed-access-policy-{{automation:EXECUTION_ID}}",
        "Parameters": [
          {
            "ParameterValue": "timed-policy-{{automation:EXECUTION_ID}}",
            "ParameterKey": "FunctionName"
          },
          {
            "ParameterValue": "{{ Duration }}",
            "ParameterKey": "Duration"
          }
        ],
        "Capabilities": [
          "CAPABILITY_IAM"
        ],
        "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nParameters:\n  Duration:\n    Description: 'Duration (in hours) for elevated permissions\n\n      '\n    Type: String\n  FunctionName:\n    Description: 'The lambda function name\n\n      '\n    Type: String\nResources:\n  LambdaFunction:\n    Properties:\n      Code:\n        ZipFile: \"import datetime\\nimport os\\n\\n\\ndef generate_elevated_policy():\\n\\\n          \\    duration = int(os.environ['DURATION'])\\n    iso_datetime_duration =\\\n          \\ \\\"{}{}\\\".format(\\n        (datetime.datetime.now() + datetime.timedelta(hours=duration)).replace(microsecond=0).isoformat(),\\\n          \\ \\\"Z\\\")\\n\\n    policy = {\\n        \\\"Version\\\": \\\"2012-10-17\\\",\\n     \\\n          \\   \\\"Statement\\\": [\\n            {\\n                \\\"Effect\\\": \\\"Allow\\\"\\\n          ,\\n                \\\"NotAction\\\": [\\n                    \\\"iam:*\\\",\\n  \\\n          \\                  \\\"organizations:*\\\",\\n                    \\\"account:*\\\"\\\n          \\n                ],\\n                \\\"Resource\\\": \\\"*\\\",\\n           \\\n          \\     \\\"Condition\\\": {\\n                    \\\"DateLessThan\\\": {\\\"aws:CurrentTime\\\"\\\n          : \\\"{}\\\".format(iso_datetime_duration)}\\n                }\\n           \\\n          \\ },\\n            {\\n                \\\"Effect\\\": \\\"Allow\\\",\\n          \\\n          \\      \\\"Action\\\": [\\n                    \\\"iam:CreateServiceLinkedRole\\\"\\\n          ,\\n                    \\\"iam:DeleteServiceLinkedRole\\\",\\n              \\\n          \\      \\\"iam:ListRoles\\\",\\n                    \\\"organizations:DescribeOrganization\\\"\\\n          ,\\n                    \\\"account:ListRegions\\\"\\n                ],\\n   \\\n          \\             \\\"Resource\\\": \\\"*\\\"\\n            }\\n        ]\\n    }\\n\\n \\\n          \\   return policy\\n\\n\\ndef main(event, context):\\n    return generate_elevated_policy()\\n\"\n      Environment:\n        Variables:\n          DURATION:\n            Ref: Duration\n      FunctionName:\n        Ref: FunctionName\n      Handler: index.main\n      Role:\n        Fn::GetAtt:\n        - LambdaRole\n        - Arn\n      Runtime: python3.7\n      Timeout: '900'\n    Type: AWS::Lambda::Function\n  LambdaRole:\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Action:\n          - sts:AssumeRole\n          Effect: Allow\n          Principal:\n            Service:\n            - lambda.amazonaws.com\n        Version: '2012-10-17'\n      Path: /\n      Policies:\n      - PolicyDocument:\n          Statement:\n          - Action:\n            - iam:ListPolicies\n            - iam:ListRoles\n            - iam:ListUsers\n            - iam:ListGroups\n            Effect: Allow\n            Resource: '*'\n          Version: '2012-10-17'\n        PolicyName: ddwa-timed-access-lambda-policy\n    Type: AWS::IAM::Role\n"
      },
      "maxAttempts": 1,
      "onFailure": "Abort",
      "isCritical": true
    },
    {
      "name": "deployElevatedTimedAccessLambda",
      "action": "aws:createStack",
      "inputs": {
        "StackName": "timed-access-{{automation:EXECUTION_ID}}",
        "Parameters": [
          {
            "ParameterValue": "timed-access-{{automation:EXECUTION_ID}}",
            "ParameterKey": "FunctionName"
          },
          {
            "ParameterValue": "{{ IAMUser }}",
            "ParameterKey": "User"
          },
          {
            "ParameterValue": "{{ Reason }}",
            "ParameterKey": "Reason"
          },
          {
            "ParameterValue": "{{ Duration }}",
            "ParameterKey": "Duration"
          },
          {
            "ParameterValue": "{{ automation:EXECUTION_ID }}",
            "ParameterKey": "ExecutionId"
          }
        ],
        "Capabilities": [
          "CAPABILITY_IAM"
        ],
        "TemplateBody": "AWSTemplateFormatVersion: 2010-09-09\nParameters:\n  Duration:\n    Description: 'Duration (in hours) for elevated permissions\n\n      '\n    Type: String\n  ExecutionId:\n    Description: 'Automation execution ID\n\n      '\n    Type: String\n  FunctionName:\n    Description: 'The lambda function name\n\n      '\n    Type: String\n  Reason:\n    Description: 'Reason for elevating permissions\n\n      '\n    Type: String\n  User:\n    Description: 'IAM User\n\n      '\n    Type: String\nResources:\n  LambdaFunction:\n    Properties:\n      Code:\n        ZipFile: \"import boto3\\nfrom botocore.exceptions import ClientError\\nimport\\\n          \\ os\\n\\n# globals\\nUSER = os.environ['USER']\\nREASON = os.environ['REASON']\\n\\\n          DURATION = int(os.environ['DURATION'])\\nEXECUTION_ID = os.environ['EXECUTIONID']\\n\\\n          \\n# boto3 clients\\niam_client = boto3.client('iam')\\nssm_client = boto3.client('ssm')\\n\\\n          lambda_client = boto3.client('lambda')\\n\\n# variables\\naws_account_id =\\\n          \\ boto3.client('sts').get_caller_identity()['Account']\\npolicy_name = \\\"\\\n          ddwa-timed-admin-access-{}\\\".format(USER)\\nelevated_policy_arn = \\\"arn:aws:iam::{}:policy/{}\\\"\\\n          .format(aws_account_id, policy_name)\\n\\n\\ndef delete_iam_policy(policy_arn):\\n\\\n          \\    print(\\\"delete_iam_policy: Deleting {}\\\".format(policy_arn))\\n    response\\\n          \\ = iam_client.delete_policy(\\n        PolicyArn=policy_arn\\n    )\\n\\n \\\n          \\   return response\\n\\n\\ndef detach_iam_policy(iam_user, policy_arn, delete=False):\\n\\\n          \\    print(\\\"detach_iam_policy: Detaching {}\\\".format(policy_arn))\\n   \\\n          \\ response = iam_client.detach_user_policy(\\n        UserName=iam_user,\\n\\\n          \\        PolicyArn=policy_arn\\n    )\\n\\n    if delete:\\n        delete_iam_policy(policy_arn)\\n\\\n          \\n    return response\\n\\n\\ndef create_iam_policy(policy_name, policy_document):\\n\\\n          \\    response_arn = iam_client.create_policy(\\n        PolicyName=policy_name,\\n\\\n          \\        PolicyDocument=policy_document\\n    )['Policy']['Arn']\\n\\n    print(\\\"\\\n          create_iam_policy: Created {} successfully\\\".format(policy_name))\\n\\n  \\\n          \\  return response_arn\\n\\n\\ndef check_and_delete_policy():\\n    attached_policies\\\n          \\ = iam_client.list_attached_user_policies(UserName=USER)['AttachedPolicies']\\n\\\n          \\n    for attached_policy in attached_policies:\\n        if attached_policy['PolicyArn']\\\n          \\ == elevated_policy_arn:\\n            detach_iam_policy(USER, elevated_policy_arn,\\\n          \\ delete=True)\\n\\n    try:\\n        response = iam_client.get_policy(\\n\\\n          \\            PolicyArn=elevated_policy_arn\\n        )['Policy']['Arn']\\n\\\n          \\n        delete_iam_policy(response)\\n    except ClientError as e:\\n  \\\n          \\      if e.response['Error']['Code'] == 'NoSuchEntity':\\n            pass\\n\\\n          \\n\\ndef attach_iam_policy_to_user(policy_arn, iam_user):\\n    print(\\\"attach_iam_policy_to_user:\\\n          \\ Attaching {} to {}\\\".format(policy_arn, iam_user))\\n    response_code\\\n          \\ = iam_client.attach_user_policy(\\n        UserName=iam_user,\\n       \\\n          \\ PolicyArn=policy_arn\\n    )['ResponseMetadata']['HTTPStatusCode']\\n\\n\\\n          \\    return response_code\\n\\n\\ndef get_execution_user(automation_execution_id):\\n\\\n          \\    executed_by = ssm_client.describe_automation_executions(\\n        Filters=[\\n\\\n          \\            {\\n                'Key': 'ExecutionId',\\n                'Values':\\\n          \\ [automation_execution_id]\\n            },\\n        ],\\n    )['AutomationExecutionMetadataList'][0]['ExecutedBy']\\n\\\n          \\n    return executed_by.partition(\\\":user/\\\")[2]\\n\\n\\ndef get_elevated_timed_policy():\\n\\\n          \\    policy_generator_lambda = \\\"ddwa-timed-policy-{}\\\".format(EXECUTION_ID)\\n\\\n          \\n    response = lambda_client.invoke(\\n        FunctionName=policy_generator_lambda,\\n\\\n          \\    )['Payload']\\n\\n    return response.read().decode(\\\"utf-8\\\")\\n\\n\\n\\\n          def main(event, context):\\n    my_managed_policy = get_elevated_timed_policy()\\n\\\n          \\n    check_and_delete_policy()\\n    create_policy_arn = create_iam_policy(policy_name,\\\n          \\ my_managed_policy)\\n    attach_policy_response = attach_iam_policy_to_user(create_policy_arn,\\\n          \\ USER)\\n\\n    if attach_policy_response == 200:\\n        print(\\\"Successfully\\\n          \\ executed create + attach to {}\\\".format(USER))\\n\"\n      Environment:\n        Variables:\n          DURATION:\n            Ref: Duration\n          EXECUTIONID:\n            Ref: ExecutionId\n          REASON:\n            Ref: Reason\n          USER:\n            Ref: User\n      FunctionName:\n        Ref: FunctionName\n      Handler: index.main\n      Role:\n        Fn::GetAtt:\n        - LambdaRole\n        - Arn\n      Runtime: python3.7\n      Timeout: '900'\n    Type: AWS::Lambda::Function\n  LambdaRole:\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Action:\n          - sts:AssumeRole\n          Effect: Allow\n          Principal:\n            Service:\n            - lambda.amazonaws.com\n        Version: '2012-10-17'\n      Path: /\n      Policies:\n      - PolicyDocument:\n          Statement:\n          - Action:\n            - logs:CreateLogGroup\n            - logs:CreateLogStream\n            - logs:PutLogEvents\n            Effect: Allow\n            Resource: arn:aws:logs:*:*:*\n          - Action:\n            - iam:GetPolicyVersion\n            - iam:DeletePolicy\n            - iam:GetGroup\n            - iam:ListInstanceProfilesForRole\n            - iam:ListAttachedRolePolicies\n            - iam:ListAttachedUserPolicies\n            - iam:ListAttachedGroupPolicies\n            - iam:DetachUserPolicy\n            - iam:ListRolePolicies\n            - iam:ListAccessKeys\n            - iam:GetRole\n            - iam:GetInstanceProfile\n            - iam:GetPolicy\n            - iam:ListGroupPolicies\n            - iam:AttachUserPolicy\n            - iam:ListUserPolicies\n            - iam:ListInstanceProfiles\n            - iam:CreatePolicy\n            - iam:ListPolicyVersions\n            - iam:GetUserPolicy\n            - iam:ListGroupsForUser\n            - iam:GetUser\n            Effect: Allow\n            Resource:\n            - arn:aws:iam::*:policy/ddwa-timed-admin-access-*\n            - arn:aws:iam::*:user/*\n          - Action:\n            - iam:ListPolicies\n            - iam:ListRoles\n            - iam:ListUsers\n            - iam:ListGroups\n            Effect: Allow\n            Resource: '*'\n          - Action: ssm:DescribeAutomationExecutions\n            Effect: Allow\n            Resource: '*'\n          - Action: lambda:InvokeFunction\n            Effect: Allow\n            Resource: arn:aws:lambda:*:*:function:ddwa-timed-*\n          Version: '2012-10-17'\n        PolicyName: ddwa-timed-access-lambda-policy\n    Type: AWS::IAM::Role\n"
      },
      "maxAttempts": 1,
      "onFailure": "Abort",
      "isCritical": true
    },
    {
      "name": "invokeElevatedTimedAccessLambda",
      "action": "aws:invokeLambdaFunction",
      "onFailure": "Abort",
      "inputs": {
        "FunctionName": "timed-access-{{automation:EXECUTION_ID}}",
        "Payload": "{\"IAMUser\": \"{{IAMUser}}\", \"Reason\": \"{{Reason}}\", \"Duration\": \"{{Duration}}\"}",
        "LogType": "Tail"
      },
      "maxAttempts": 1,
      "timeoutSeconds": 360,
      "isCritical": false
    },
    {
      "name": "deleteElevatedTimedAccessLambda",
      "action": "aws:deleteStack",
      "inputs": {
        "StackName": "timed-access-{{automation:EXECUTION_ID}}"
      },
      "isCritical": false
    },
    {
      "name": "deleteElevatedPolicyGeneratorLambda",
      "action": "aws:deleteStack",
      "inputs": {
        "StackName": "timed-access-policy-{{automation:EXECUTION_ID}}"
      },
      "isCritical": false,
      "isEnd": true
    }
  ],
  "outputs": [
    "invokeElevatedTimedAccessLambda.LogResult"
  ]
}