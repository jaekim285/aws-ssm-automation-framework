AWSTemplateFormatVersion: 2010-09-09
Parameters:
  FunctionName:
    Description: >
      The lambda function name
    Type: String
  User:
    Description: >
      IAM User
    Type: String
  Reason:
    Description: >
      Reason for elevating permissions
    Type: String
  Duration:
    Description: >
      Duration (in hours) for elevated permissions
    Type: String
  ExecutionId:
    Description: >
      Automation execution ID
    Type: String
Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Code:
        ZipFile: |
          import boto3
          from botocore.exceptions import ClientError
          import os

          # globals
          USER = os.environ['USER']
          REASON = os.environ['REASON']
          DURATION = int(os.environ['DURATION'])
          EXECUTION_ID = os.environ['EXECUTIONID']

          # boto3 clients
          iam_client = boto3.client('iam')
          ssm_client = boto3.client('ssm')
          lambda_client = boto3.client('lambda')

          # variables
          aws_account_id = boto3.client('sts').get_caller_identity()['Account']
          policy_name = "timed-admin-access-{}".format(USER)
          elevated_policy_arn = "arn:aws:iam::{}:policy/{}".format(aws_account_id, policy_name)


          def delete_iam_policy(policy_arn):
              print("delete_iam_policy: Deleting {}".format(policy_arn))
              response = iam_client.delete_policy(
                  PolicyArn=policy_arn
              )

              return response


          def detach_iam_policy(iam_user, policy_arn, delete=False):
              print("detach_iam_policy: Detaching {}".format(policy_arn))
              response = iam_client.detach_user_policy(
                  UserName=iam_user,
                  PolicyArn=policy_arn
              )

              if delete:
                  delete_iam_policy(policy_arn)

              return response


          def create_iam_policy(policy_name, policy_document):
              response_arn = iam_client.create_policy(
                  PolicyName=policy_name,
                  PolicyDocument=policy_document
              )['Policy']['Arn']

              print("create_iam_policy: Created {} successfully".format(policy_name))

              return response_arn


          def check_and_delete_policy():
              attached_policies = iam_client.list_attached_user_policies(UserName=USER)['AttachedPolicies']

              for attached_policy in attached_policies:
                  if attached_policy['PolicyArn'] == elevated_policy_arn:
                      detach_iam_policy(USER, elevated_policy_arn, delete=True)

              try:
                  response = iam_client.get_policy(
                      PolicyArn=elevated_policy_arn
                  )['Policy']['Arn']

                  delete_iam_policy(response)
              except ClientError as e:
                  if e.response['Error']['Code'] == 'NoSuchEntity':
                      pass


          def attach_iam_policy_to_user(policy_arn, iam_user):
              print("attach_iam_policy_to_user: Attaching {} to {}".format(policy_arn, iam_user))
              response_code = iam_client.attach_user_policy(
                  UserName=iam_user,
                  PolicyArn=policy_arn
              )['ResponseMetadata']['HTTPStatusCode']

              return response_code


          def get_execution_user(automation_execution_id):
              executed_by = ssm_client.describe_automation_executions(
                  Filters=[
                      {
                          'Key': 'ExecutionId',
                          'Values': [automation_execution_id]
                      },
                  ],
              )['AutomationExecutionMetadataList'][0]['ExecutedBy']

              return executed_by.partition(":user/")[2]


          def get_elevated_timed_policy():
              policy_generator_lambda = "timed-policy-{}".format(EXECUTION_ID)

              response = lambda_client.invoke(
                  FunctionName=policy_generator_lambda,
              )['Payload']

              return response.read().decode("utf-8")


          def main(event, context):
              my_managed_policy = get_elevated_timed_policy()

              check_and_delete_policy()
              create_policy_arn = create_iam_policy(policy_name, my_managed_policy)
              attach_policy_response = attach_iam_policy_to_user(create_policy_arn, USER)

              if attach_policy_response == 200:
                  print("Successfully executed create + attach to {}".format(USER))
      Handler: "index.main"
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: python3.7
      Timeout: '900'
      Environment:
        Variables:
          USER: !Ref User
          REASON: !Ref Reason
          DURATION: !Ref Duration
          EXECUTIONID: !Ref ExecutionId
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: timed-access-lambda-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - iam:GetPolicyVersion
            - iam:DeletePolicy
            - iam:GetGroup
            - iam:ListInstanceProfilesForRole
            - iam:ListAttachedRolePolicies
            - iam:ListAttachedUserPolicies
            - iam:ListAttachedGroupPolicies
            - iam:DetachUserPolicy
            - iam:ListRolePolicies
            - iam:ListAccessKeys
            - iam:GetRole
            - iam:GetInstanceProfile
            - iam:GetPolicy
            - iam:ListGroupPolicies
            - iam:AttachUserPolicy
            - iam:ListUserPolicies
            - iam:ListInstanceProfiles
            - iam:CreatePolicy
            - iam:ListPolicyVersions
            - iam:GetUserPolicy
            - iam:ListGroupsForUser
            - iam:GetUser
            Resource:
            - arn:aws:iam::*:policy/timed-admin-access-*
            - arn:aws:iam::*:user/*
          - Effect: Allow
            Action:
            - iam:ListPolicies
            - iam:ListRoles
            - iam:ListUsers
            - iam:ListGroups
            Resource: '*'
          - Effect: Allow
            Action: ssm:DescribeAutomationExecutions
            Resource: '*'
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: arn:aws:lambda:*:*:function:timed-*
